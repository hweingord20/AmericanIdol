# Results

## Graphs
```{r}
#install.packages("maps")
#install.packages("dplyr")
#install.packages("tidygeocoder")
```


```{r}
library(ggplot2)
library(maps)
library(dplyr)
library(tidygeocoder)
world_map <- map_data("world")
finalists <- read.csv("finalists.csv")
finalists_geocoded <- finalists |>
  geocode(address = Birthplace, method = 'osm')
```

```{r}
ggplot() + 
  geom_map(data = world_map, map = world_map, 
           aes(x = long, y = lat, map_id = region, group = group), 
           fill = "white", color = "gray",alpha=0.3) + 
  geom_point(data = finalists_geocoded, 
             aes(x = long, y = lat), 
             color = "#63C5DA", alpha = 0.6, size = 2) + 
  theme_minimal() + 
   ylim(-50,100)+
  ggtitle("World Distribution of Finalists")
```
```{r}
usa_map <- filter(world_map,region=="USA")
usa_finalists <- filter(finalists_geocoded, long < -50, lat >0)
ggplot() + 
  geom_map(data = usa_map, map = usa_map, 
           aes(x = long, y = lat, map_id = region, group = group), 
           fill = "white", color = "black") + 
  geom_point(data = usa_finalists, 
             aes(x = long, y = lat), 
             color = "#63C5DA", alpha = 0.6, size = 2) + 
  theme_minimal() + 
  coord_fixed(ratio=1.2)+
  xlim(-130,-60)+
  ylim(25,50)+
  ggtitle("USA Distribution of Finalists")
```
```{r fig.height=7}
elim <- read.csv("elimination_chart.csv")
elim_cleaned <- elim |>
  filter(!is.na(gender) & !is.na(season))

ggplot(elim_cleaned, aes(x=gender))+
  geom_bar(fill="#63C5DA",color="black")+
  facet_wrap(~ season,scales="free_x",labeller = labeller(season = function(x) paste("Season", x)))+
  labs(title = "Gender Distribution by Season", x = "Gender", y="Count")+
  theme_minimal()
```
```{r}
 filtered_gender <- elim_cleaned[elim_cleaned$place == 1, ] 
ggplot(filtered_gender, aes(x = gender)) + 
  geom_bar(fill="#63C5DA",color="black") + 
  labs(title = "Gender Distribution of Winners", x = "Gender", y = "Count") + 
  theme_minimal()
```
```{r}
install.packages("lubridate")
library(lubridate)
ratings <- read.csv("ratings.csv")
ratings$airdate <- mdy(ratings$airdate) 

ggplot(ratings, aes(x = airdate, y = viewers_in_millions)) + 
  geom_point(color = "#63C5DA") + 
  scale_x_date(labels = scales::date_format("%Y"), breaks = "1 year") + 
  labs(x = "Airdate", y = "Viewers (in millions)", title = "Viewers Over Time") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
```{r}
ratings$numerators <- sapply(ratings$X18_49_rating_share, function(x) {
  if (grepl("/", x)) { # If there's a fraction
    as.numeric(strsplit(x, "/")[[1]][1]) # Split and take the numerator as a number
  } else {
    as.numeric(x) # Otherwise, convert the value directly to a float
  }
})

print(ratings)
```



```{r}
ratings$weekrank <- as.numeric(as.character(ratings$weekrank))

ggplot(ratings, aes(x = viewers_in_millions, y = weekrank )) +
  geom_point(size = 1.5, alpha = 0.4) + # Add points for the scatter plot
  scale_y_reverse()+
  labs(
    title = "Weekly Rank vs. Viewers in Millions",
    x = "Viewers (in Millions)",
    y = "Week Rank"
  ) +
  theme_minimal() 
```



```{r}
library(dplyr)
library(ggplot2)

# Data: Judges per season
judges <- data.frame(
  season = 1:18,
  judge = c(
    "Paula Abdul, Simon Cowell, Randy Jackson",
    "Paula Abdul, Simon Cowell, Randy Jackson",
    "Paula Abdul, Simon Cowell, Randy Jackson",
    "Paula Abdul, Simon Cowell, Randy Jackson",
    "Paula Abdul, Simon Cowell, Randy Jackson",
    "Paula Abdul, Simon Cowell, Randy Jackson",
    "Paula Abdul, Simon Cowell, Randy Jackson",
    "Paula Abdul, Simon Cowell, Kara DioGuardi, Randy Jackson",
    "Simon Cowell, Ellen DeGeneres, Kara DioGuardi, Randy Jackson",
    "Randy Jackson, Jennifer Lopez, Steven Tyler",
    "Randy Jackson, Jennifer Lopez, Steven Tyler",
    "Randy Jackson, Mariah Carey, Nicki Minaj, Keith Urban",
    "Harry Connick Jr., Jennifer Lopez, Keith Urban",
    "Harry Connick Jr., Jennifer Lopez, Keith Urban",
    "Harry Connick Jr., Jennifer Lopez, Keith Urban",
    "Katy Perry, Luke Bryan, Lionel Richie",
    "Katy Perry, Luke Bryan, Lionel Richie",
    "Katy Perry, Luke Bryan, Lionel Richie"
  )
)

average_viewers <- ratings |>
  group_by(season) %>% summarise(avg_viewers = mean(viewers_in_millions, na.rm = TRUE))

# Example ratings data: Average viewers per season
avg_ratings <- data.frame(
  season = c(1:13, 15:18),
  avg_viewers = average_viewers
)

# Step 1: Merge judges with average viewership
seasonal_data <- merge(judges, avg_ratings, by = "season")

# Step 2: Prepare heatmap data: One judge per row
heatmap_data <- seasonal_data |>
  separate_rows(judge, sep = ", ")  # Split multiple judges into separate rows

# Step 3: Create the heatmap
ggplot(heatmap_data, aes(x = factor(season), y = judge, fill = avg_viewers.avg_viewers)) +
  geom_tile(color = "white") +
  scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Avg Viewers\n(Millions)") +
  labs(
    title = "Seasonal Viewership by Judge",
    x = "Season",
    y = "Judge"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```





