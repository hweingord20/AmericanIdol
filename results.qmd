# Results

##Viewership and Judges

```{r, error=TRUE}
#| echo: false
install.packages("lubridate")
library(lubridate)
library(scales)
library(ggplot2)

ratings <- read.csv("ratings.csv")
ratings$airdate <- mdy(ratings$airdate) 

ggplot(ratings, aes(x = airdate, y = viewers_in_millions)) + 
  geom_point(color = "#63C5DA") + 
  scale_x_date(labels = scales::date_format("%Y"), breaks = "1 year") + 
  labs(x = "Airdate", y = "Viewers (in millions)", title = "Viewers Over Time") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
The graph demonstrates the distribution of viewers over the years, where each year corresponds to one season (with season 1 starting in 2002). Note that the multiple points within each years represents the different episodes for that one season. The peak viewership was in 2007 and 2008 for season 5 and season 6, at around 45 million viewers. The graph is right skewed - in the more recent years, the number of viewers drastically decreased. This decrease could potentially be from increase of popularity with other singing shows, such as The Voice. Another possible explanation for the decrease in viewers over the years could be related to the judges for each season. To further explore this idea, we created a heatmap showing the number of viewers per season and the different judges.  

```{r, error = TRUE}
library(dplyr)
library(ggplot2)
library(tidyr)

judges <- data.frame(
  season = 1:18,
  judge = c(
    "Paula Abdul, Simon Cowell, Randy Jackson",
    "Paula Abdul, Simon Cowell, Randy Jackson",
    "Paula Abdul, Simon Cowell, Randy Jackson",
    "Paula Abdul, Simon Cowell, Randy Jackson",
    "Paula Abdul, Simon Cowell, Randy Jackson",
    "Paula Abdul, Simon Cowell, Randy Jackson",
    "Paula Abdul, Simon Cowell, Randy Jackson",
    "Paula Abdul, Simon Cowell, Kara DioGuardi, Randy Jackson",
    "Simon Cowell, Ellen DeGeneres, Kara DioGuardi, Randy Jackson",
    "Randy Jackson, Jennifer Lopez, Steven Tyler",
    "Randy Jackson, Jennifer Lopez, Steven Tyler",
    "Randy Jackson, Mariah Carey, Nicki Minaj, Keith Urban",
    "Harry Connick Jr., Jennifer Lopez, Keith Urban",
    "Harry Connick Jr., Jennifer Lopez, Keith Urban",
    "Harry Connick Jr., Jennifer Lopez, Keith Urban",
    "Katy Perry, Luke Bryan, Lionel Richie",
    "Katy Perry, Luke Bryan, Lionel Richie",
    "Katy Perry, Luke Bryan, Lionel Richie"
  )
)

ratings <- read.csv("ratings.csv")

average_viewers <- ratings |>
  group_by(season) %>% summarise(avg_viewers = mean(viewers_in_millions, na.rm = TRUE))

avg_ratings <- data.frame(
  season = c(1:13, 15:18),
  avg_viewers = average_viewers
)

seasonal_data <- merge(judges, avg_ratings, by = "season")


heatmap_data <- seasonal_data |>
  separate_rows(judge, sep = ", ")  

#Create the heatmap
ggplot(heatmap_data, aes(x = factor(season), y = judge, fill = avg_viewers.avg_viewers)) +
  geom_tile(color = "white") +
  scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Avg Viewers\n(Millions)") +
  labs(
    title = "Seasonal Viewership by Judge",
    x = "Season",
    y = "Judge"
  ) +
  theme_minimal()
```
Th

##Ranking
```{r}
library(ggridges)
library(dplyr)
ratings <- read.csv("ratings.csv")
# Ensure weekrank is numeric
ratings$weekrank <- as.numeric(as.character(ratings$weekrank))
filtered_ratings <- ratings |>
  filter(!is.na(weekrank), weekrank < 23)

filtered_ratings$weekrank <- factor(filtered_ratings$weekrank, levels = rev(sort(unique(filtered_ratings$weekrank))))

# Create the ridgeline plot
ggplot(filtered_ratings, aes(x = viewers_in_millions, y = factor(weekrank))) +
  geom_density_ridges(color = "black", fill = "#63C5DA", alpha = 0.6) +
  labs(
    x = "Viewers (in millions)",
    y = "Week Rank",
    title = "Distribution of Viewers by Episode Ranking"
  ) +
  theme_minimal()

```

##Audition Cities
```{r fig.height= 10, error=TRUE}
auditions <- read.csv("auditions.csv")

ggplot(auditions |>
         filter(!is.na(tickets_to_hollywood)), aes(x = tickets_to_hollywood, y = reorder(audition_city, tickets_to_hollywood, FUN = function(x) length(x)))) + 
  geom_point(size = 3, color = "steelblue") + 
  labs( title = "Tickets to Hollywood by Audition City", x = "Number of Tickets to Hollywood", y = "Audition City" ) + 
  theme_minimal()

```

```{r fig.height= 20, error=TRUE}
library(ggplot2)
library(plotly)
auditions <- read.csv("auditions.csv")

auditions_filtered <- auditions |>
  filter(!is.na(tickets_to_hollywood)) |>
  mutate( Q1 = quantile(tickets_to_hollywood, 0.25), 
          Q3 = quantile(tickets_to_hollywood, 0.75), 
          IQR = Q3 - Q1 ) |>
  filter( tickets_to_hollywood >= (Q1 - 1.5 * IQR) & tickets_to_hollywood <= (Q3 + 1.5 * IQR)) |>
  select(-Q1, -Q3, -IQR)
                                   
ggplot_object <- ggplot(auditions_filtered, aes(x = tickets_to_hollywood, y = reorder(audition_city, tickets_to_hollywood, FUN = function(x) length(x)))) + 
  geom_point(size = 1, color = "steelblue") + 
  facet_wrap(~ season, scales = "free_y", ncol=1, labeller = labeller(season = function(x) paste("Season", x))) +
  labs( title = "Tickets to Hollywood by Audition City", x = "Number of Tickets to Hollywood", y = "Audition City" ) + 
  theme_minimal() + 
  theme(plot.margin = margin(t = 10, r = 10, b = 10, l = 20),
        strip.text = element_text(size = 10, face = "bold"),
        axis.text.y = element_text(size = 5, margin = margin(r = 10), lineheight = 2), 
        axis.text.x = element_text(size = 9) ) 

ggplotly(ggplot_object, height = 1500)

```

##Birthplaces of Finalists

```{r}
library(ggplot2)
library(maps)
library(dplyr)
library(tidygeocoder)
world_map <- map_data("world")
finalists <- read.csv("finalists.csv")
finalists_geocoded <- finalists |>
  geocode(address = Birthplace, method = 'osm')

ggplot() + 
  geom_map(data = world_map, map = world_map, 
           aes(x = long, y = lat, map_id = region, group = group), 
           fill = "white", color = "gray",alpha=0.3) + 
  geom_point(data = finalists_geocoded, 
             aes(x = long, y = lat), 
             color = "#63C5DA", alpha = 0.6, size = 2) + 
  theme_minimal() + 
   ylim(-50,100)+
  ggtitle("World Distribution of Finalists")
```
```{r}
usa_map <- filter(world_map,region=="USA")
usa_finalists <- filter(finalists_geocoded, long < -50, lat >0)
ggplot() + 
  geom_map(data = usa_map, map = usa_map, 
           aes(x = long, y = lat, map_id = region, group = group), 
           fill = "white", color = "black") + 
  geom_point(data = usa_finalists, 
             aes(x = long, y = lat), 
             color = "#63C5DA", alpha = 0.6, size = 2) + 
  theme_minimal() + 
  coord_fixed(ratio=1.2)+
  xlim(-130,-60)+
  ylim(25,50)+
  ggtitle("USA Distribution of Finalists")
```

##Age and Gender

```{r fig.height=7}
elim <- read.csv("elimination_chart.csv")
elim_cleaned <- elim |>
  filter(!is.na(gender) & !is.na(season))

ggplot(elim_cleaned, aes(x=gender))+
  geom_bar(fill="#63C5DA",color="black")+
  facet_wrap(~ season,scales="free_x",labeller = labeller(season = function(x) paste("Season", x)))+
  labs(title = "Gender Distribution by Season", x = "Gender", y="Count")+
  theme_minimal()
```


```{r}
 filtered_gender <- elim_cleaned[elim_cleaned$place == 1, ] 
ggplot(filtered_gender, aes(x = gender)) + 
  geom_bar(fill="#63C5DA",color="black") + 
  labs(title = "Gender Distribution of Winners", x = "Gender", y = "Count") + 
  theme_minimal()
```


```{r}
library(dplyr)
library(lubridate)
library(ggplot2)

# Load datasets
seasons <- read.csv("seasons.csv")       
finalists <- read.csv("finalists.csv")   

finalists <- finalists |>
  rename(season = Season)

finalists <- finalists |>
  mutate(Birthday = dmy(Birthday),            
         BirthYear = year(Birthday))           

season_years <- setdiff(2002:2020, 2017)
seasons <- seasons |>
  mutate(year = season_years[season])

finalists_with_season <- finalists |>
  left_join(seasons, by = "season") |>
  mutate(is_winner = Contestant == winner)  # Mark winners

finalists_with_season <- finalists_with_season |>
  mutate(age = year - BirthYear)

winners_only <- finalists_with_season |>
  filter(is_winner)

ggplot(winners_only, aes(x = age, fill = is_winner)) +
  geom_density(fill = "steelblue", alpha = 0.2) +
  labs(
    title = "Age Distribution of Winners",
    x = "Age",
    y = "Density"
  ) +
  theme_minimal()

```


```{r}
finalists_with_season <- finalists_with_season |>
  mutate(group = ifelse(is_winner, "Winner", "Finalist")) 

ggplot(finalists_with_season, aes(x = age, color = group, fill = group)) + 
  geom_density(alpha = 0.4, size=1) + 
  labs( title = "Age Distribution: Finalists vs Winners", x = "Age", y = "Density" ) + scale_color_manual(values = c("Finalist" = "darkblue", "Winner" = "lavender")) + scale_fill_manual(values = c("Finalist" = "darkblue", "Winner" = "lavender")) +
  theme_minimal()
```



