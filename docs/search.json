[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "American Idol Data Analysis",
    "section": "",
    "text": "1 Introduction\nAmerican Idol is a reality TV show where aspiring singers compete for the winning title. Once the contestants go through the final round of auditions, the they perform in front of a panel of judges and a live audience. Overall, we want to analyze what factors are correlated with winners/finalists and what contributes to the success of the show. We decided on this topic because we both grew up watching American Idol and are interested in the statistics in the background. Through our data analysis, we will examine the following questions:\n\nWhat’s the general trend in the viewership over the seasons?\nWhich audition cities produced the most contestants across the seasons?\nAre younger contestants more likely to be make it to the final rounds than older ones?\nAre certain judges associated with higher-rated seasons?\nHow has the gender ratio of finalists changed over the seasons?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "2.1 Description",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#description",
    "href": "data.html#description",
    "title": "2  Data",
    "section": "",
    "text": "Songs: includes songs that contestants sang and competed with on American Idol from seasons 1-18 (with dimensions 2430 x 8)\nAuditions: auditions, cities, dates, and venues (with dimension 143 x 12)\nElimination Chart: eliminations by week (with dimension 457 x 46)\nFinalists: information on top contestants, including birthday, hometown, and description (with dimensions 191 x 5)\nRatings: episode ratings and reviews (with dimensions 594 x 17)\nSeasons: season-level information, including season winner, runner up and release dates and judges (with dimensions 19 x 10)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.2 Missing value analysis",
    "text": "2.2 Missing value analysis\n\n\nCode\nauditions &lt;- read.csv(\"auditions.csv\")\n\n\n\n\nCode\nlibrary(ggplot2)\nna_counts_aud &lt;- colSums(is.na(auditions))\nna_aud_df &lt;- data.frame(\n  Column = names(na_counts_aud),\n  NA_Counts = na_counts_aud\n)\n\nggplot(na_aud_df, aes(x=reorder(Column, -NA_Counts), y = NA_Counts))+\n  geom_bar(stat = 'identity', fill='steelblue')+\n  theme_minimal()+\n  labs(\n    title = \"# of NA Values for the Audition Dataset\",\n    x='Column',\n    y='# of NA Values'\n  )+\n  theme(axis.text.x = element_text(angle=45,hjust=1))\n\n\n\n\n\n\n\n\n\n\n\nCode\nsongs &lt;- read.csv(\"songs_all.csv\")\n\n\n\n\nCode\nlibrary(ggplot2)\nna_counts_songs &lt;- colSums(is.na(songs))\nna_songs_df &lt;- data.frame(\n  Column = names(na_counts_songs),\n  NA_Counts = na_counts_songs\n)\n\nggplot(na_songs_df, aes(x=reorder(Column, -NA_Counts), y = NA_Counts))+\n  geom_bar(stat = 'identity', fill='steelblue')+\n  theme_minimal()+\n  labs(\n    title = \"# of NA Values for the Songs Dataset\",\n    x='Column',\n    y='# of NA Values'\n  )+\n  theme(axis.text.x = element_text(angle=45,hjust=1))\n\n\n\n\n\n\n\n\n\n\n\nCode\nSeasons &lt;- read.csv(\"seasons.csv\")\n\n\n\n\nCode\nna_counts_seasons &lt;- colSums(is.na(Seasons))\nna_seas_df &lt;- data.frame(\n  Column = names(na_counts_seasons),\n  NA_Counts = na_counts_seasons\n)\n\nggplot(na_seas_df, aes(x=reorder(Column, -NA_Counts), y = NA_Counts))+\n  geom_bar(stat = 'identity', fill='steelblue')+\n  theme_minimal()+\n  labs(\n    title = \"# of NA Values for the Seasons Dataset\",\n    x='Column',\n    y='# of NA Values'\n  )+\n  theme(axis.text.x = element_text(angle=45,hjust=1))\n\n\n\n\n\n\n\n\n\n\n\nCode\nratings &lt;- read.csv(\"ratings.csv\")\n\n\n\n\nCode\nna_counts_rating &lt;- colSums(is.na(ratings))\nna_rate_df &lt;- data.frame(\n  Column = names(na_counts_rating),\n  NA_Counts = na_counts_rating\n)\n\nggplot(na_rate_df, aes(x=reorder(Column, -NA_Counts), y = NA_Counts))+\n  geom_bar(stat = 'identity', fill='steelblue')+\n  theme_minimal()+\n  labs(\n    title = \"# of NA Values for the Ratings Dataset\",\n    x='Column',\n    y='# of NA Values'\n  )+\n  theme(axis.text.x = element_text(angle=45,hjust=1))\n\n\n\n\n\n\n\n\n\n\n\nCode\nfinalists &lt;- read.csv(\"finalists.csv\")\n\n\n\n\nCode\nna_counts_fin &lt;- colSums(is.na(finalists))\nna_fin_df &lt;- data.frame(\n  Column = names(na_counts_fin),\n  NA_Counts = na_counts_fin\n)\n\nggplot(na_fin_df, aes(x=reorder(Column, -NA_Counts), y = NA_Counts))+\n  geom_bar(stat = 'identity', fill='steelblue')+\n  theme_minimal()+\n  labs(\n    title = \"# of NA Values for the Finalists Dataset\",\n    x='Column',\n    y='# of NA Values'\n  )+\n  theme(axis.text.x = element_text(angle=45,hjust=1))\n\n\n\n\n\n\n\n\n\n\n\nCode\nelim &lt;- read.csv(\"elimination_chart.csv\")\n\n\n\n\nCode\nna_counts_elim &lt;- colSums(is.na(elim))\nna_elim_df &lt;- data.frame(\n  Column = names(na_counts_elim),\n  NA_Counts = na_counts_elim\n)\n\nggplot(na_elim_df, aes(x=reorder(Column, -NA_Counts), y = NA_Counts))+\n  geom_bar(stat = 'identity', fill='steelblue')+\n  theme_minimal()+\n  labs(\n    title = \"# of NA Values for the Elimation Chart Dataset\",\n    x='Column',\n    y='# of NA Values'\n  )+\n  theme(axis.text.x = element_text(angle=45,hjust=1))\n\n\n\n\n\n\n\n\n\nOverall, the Elimination Chart has the most missing values. Due to this, we decided to not use this specific dataset for our analysis and will tweak our questions accordingly. For example, we will rephrase the question: ‘Are younger contestants more likely to be eliminated earlier or later in the competition?’ to ‘What is the age distribution among the finalists?’. For the Audition datset, the column ‘guest_judge’ has the most missing values. This makes sense because there is not a guest judge on every episode. Interestingly, the finalists dataset is missing a lot of values. When further examining the dataset, we found it because there is a “hometown” and “birthplace” column. For those with the same hometown and birthplace, hometown is left as NA. For this reason, we will take out the ‘hometown’ column and just use the ‘birthplace’ column. The ratings dataset has a lot of missing values as well, but we don’t need to use these columns for the questions we are interested in answering.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "3.1 Viewership and Judges\nCode\ninstall.packages(\"lubridate\")\n\n\nError in contrib.url(repos, \"source\"): trying to use CRAN without setting a mirror\n\n\nCode\nlibrary(lubridate)\nlibrary(scales)\nlibrary(ggplot2)\n\nratings &lt;- read.csv(\"ratings.csv\")\nratings$airdate &lt;- mdy(ratings$airdate) \n\nggplot(ratings, aes(x = airdate, y = viewers_in_millions)) + \n  geom_point(color = \"#63C5DA\") + \n  scale_x_date(labels = scales::date_format(\"%Y\"), breaks = \"1 year\") + \n  labs(x = \"Airdate\", y = \"Viewers (in millions)\", title = \"Viewers Over Time\") + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\nThe graph demonstrates the distribution of viewers over the years, where each year corresponds to one season (with season 1 starting in 2002). Note that the multiple points within each years represents the different episodes for that one season. The peak viewership was in 2007 and 2008 for season 5 and season 6, at around 45 million viewers. The graph is right skewed - in the more recent years, the number of viewers drastically decreased. This decrease could potentially be from increase of popularity with other singing shows, such as The Voice. Another possible explanation for the decrease in viewers over the years could be related to the judges for each season. To further explore this idea, we created a heatmap showing the number of viewers per season and the different judges.\nCode\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tidyr)\n\njudges &lt;- data.frame(\n  season = 1:18,\n  judge = c(\n    \"Paula Abdul, Simon Cowell, Randy Jackson\",\n    \"Paula Abdul, Simon Cowell, Randy Jackson\",\n    \"Paula Abdul, Simon Cowell, Randy Jackson\",\n    \"Paula Abdul, Simon Cowell, Randy Jackson\",\n    \"Paula Abdul, Simon Cowell, Randy Jackson\",\n    \"Paula Abdul, Simon Cowell, Randy Jackson\",\n    \"Paula Abdul, Simon Cowell, Randy Jackson\",\n    \"Paula Abdul, Simon Cowell, Kara DioGuardi, Randy Jackson\",\n    \"Simon Cowell, Ellen DeGeneres, Kara DioGuardi, Randy Jackson\",\n    \"Randy Jackson, Jennifer Lopez, Steven Tyler\",\n    \"Randy Jackson, Jennifer Lopez, Steven Tyler\",\n    \"Randy Jackson, Mariah Carey, Nicki Minaj, Keith Urban\",\n    \"Harry Connick Jr., Jennifer Lopez, Keith Urban\",\n    \"Harry Connick Jr., Jennifer Lopez, Keith Urban\",\n    \"Harry Connick Jr., Jennifer Lopez, Keith Urban\",\n    \"Katy Perry, Luke Bryan, Lionel Richie\",\n    \"Katy Perry, Luke Bryan, Lionel Richie\",\n    \"Katy Perry, Luke Bryan, Lionel Richie\"\n  )\n)\n\nratings &lt;- read.csv(\"ratings.csv\")\n\naverage_viewers &lt;- ratings |&gt;\n  group_by(season) %&gt;% summarise(avg_viewers = mean(viewers_in_millions, na.rm = TRUE))\n\navg_ratings &lt;- data.frame(\n  season = c(1:13, 15:18),\n  avg_viewers = average_viewers\n)\n\nseasonal_data &lt;- merge(judges, avg_ratings, by = \"season\")\n\n\nheatmap_data &lt;- seasonal_data |&gt;\n  separate_rows(judge, sep = \", \")  \n\n#Create the heatmap\nggplot(heatmap_data, aes(x = factor(season), y = judge, fill = avg_viewers.avg_viewers)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient(low = \"lightblue\", high = \"darkblue\", name = \"Avg Viewers\\n(Millions)\") +\n  labs(\n    title = \"Seasonal Viewership by Judge\",\n    x = \"Season\",\n    y = \"Judge\"\n  ) +\n  theme_minimal()\nThe coloring represents the number of viewers per season, with dark blue indicating a higher viewership compared to light blue (see legend). As observed in the time series plot, seasons 5 and 6 had the highest number of viewers. Notably, Simon Cowell, Randy Jackson, and Paula Abdul served as judges during these seasons. Since these three were consistent judges in the early seasons, their popularity might explain the surge in viewership during this period.\nAfter season 7, the panel of judges became more varied, lacking a consistent lineup. This inconsistency might be one reason for the decline in viewership in later seasons. Additionally, Luke Bryan, Katy Perry, and Lionel Richie were the judges for the most recent seasons, which coincided with the lowest viewership. Lastly, the heatmap highlights that Randy Jackson had the longest tenure as a judge on the show.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#ranking",
    "href": "results.html#ranking",
    "title": "3  Results",
    "section": "3.2 Ranking",
    "text": "3.2 Ranking\n\n\nCode\nlibrary(ggridges)\nlibrary(dplyr)\nlibrary(ggplot2)\nratings &lt;- read.csv(\"ratings.csv\")\n# Ensure weekrank is numeric\nratings$weekrank &lt;- as.numeric(as.character(ratings$weekrank))\nfiltered_ratings &lt;- ratings |&gt;\n  filter(!is.na(weekrank), weekrank &lt; 23)\n\nfiltered_ratings$weekrank &lt;- factor(filtered_ratings$weekrank, levels = rev(sort(unique(filtered_ratings$weekrank))))\n\n# Create the ridgeline plot\nggplot(filtered_ratings, aes(x = viewers_in_millions, y = factor(weekrank))) +\n  geom_density_ridges(color = \"black\", fill = \"#63C5DA\", alpha = 0.6) +\n  labs(\n    x = \"Viewers (in millions)\",\n    y = \"Week Rank\",\n    title = \"Distribution of Viewers by Episode Ranking\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nTo continue our exploration on viewership patterns, we examined the relationship between the number of viewers per episode and episode rankings, considering all episodes across all seasons. Rankings range from 1 (best) to 22 (worst). The analysis reveals a clear pattern: higher-ranked episodes tend to have higher viewership, while lower-ranked episodes correspond to lower viewership. This indicates a correlation between episode rankings and viewership numbers.\nInterestingly, lower-ranked episodes exhibit less variability, with viewership clustered tightly around the mode. In contrast, episodes ranked in the top 25% display a much wider distribution. In fact, the ridgeline plots for these episodes are nearly flat, reflecting significant variation in viewership.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#audition-cities",
    "href": "results.html#audition-cities",
    "title": "3  Results",
    "section": "3.3 Audition Cities",
    "text": "3.3 Audition Cities\n\n\nCode\nauditions &lt;- read.csv(\"auditions.csv\")\n\nggplot(auditions |&gt;\n         filter(!is.na(tickets_to_hollywood)), aes(x = tickets_to_hollywood, y = reorder(audition_city, tickets_to_hollywood, FUN = function(x) length(x)))) + \n  geom_point(size = 3, color = \"steelblue\") + \n  labs( title = \"Tickets to Hollywood by Audition City\", x = \"Number of Tickets to Hollywood\", y = \"Audition City\" ) + \n  theme_minimal()\n\n\n\n\n\n\n\n\n\nOur next area of focus was understanding where people initially auditioned and which cities produced the highest number of contestants. To examine this, we first created a Cleaveland Dot Plot to show the cities that held auditions, and the number of tickets to hollywood each city gave out. This plot is looking at all seasons, where multiple dots within one city correspond to different seasons. Most of the cities seem to give out 50 or so tickets each season. However, we can see three drastic outliers - one from LA at about 300, another from SF at about 450, and a third from Nashville at about 550. We will remove these outliers and focus on the remaining data, exmaining cities season by season.\n\n\nCode\nlibrary(ggplot2)\nlibrary(plotly)\nauditions &lt;- read.csv(\"auditions.csv\")\n\nauditions_filtered &lt;- auditions |&gt;\n  filter(!is.na(tickets_to_hollywood)) |&gt;\n  mutate( Q1 = quantile(tickets_to_hollywood, 0.25), \n          Q3 = quantile(tickets_to_hollywood, 0.75), \n          IQR = Q3 - Q1 ) |&gt;\n  filter( tickets_to_hollywood &gt;= (Q1 - 1.5 * IQR) & tickets_to_hollywood &lt;= (Q3 + 1.5 * IQR)) |&gt;\n  select(-Q1, -Q3, -IQR)\n                                   \nggplot_object &lt;- ggplot(auditions_filtered, aes(x = tickets_to_hollywood, y = reorder(audition_city, tickets_to_hollywood, FUN = function(x) length(x)))) + \n  geom_point(size = 1, color = \"steelblue\") + \n  facet_wrap(~ season, scales = \"free_y\", ncol=1, labeller = labeller(season = function(x) paste(\"Season\", x))) +\n  labs( title = \"Tickets to Hollywood by Audition City\", x = \"Number of Tickets to Hollywood\", y = \"Audition City\" ) + \n  theme_minimal() + \n  theme(plot.margin = margin(t = 10, r = 10, b = 10, l = 20),\n        strip.text = element_text(size = 10, face = \"bold\"),\n        axis.text.y = element_text(size = 5, margin = margin(r = 10), lineheight = 2), \n        axis.text.x = element_text(size = 9) ) \n\nggplotly(ggplot_object, height = 1500)\n\n\n\n\n\n\nIt’s important to note that our data covers only seasons 1 through 13. Breaking the data down by city highlights the most consistent audition locations, such as San Francisco (SF) and Los Angeles (LA), which appear in nearly every season. Most seasons featured auditions in six cities; however, season 10 was an exception, with auditions held in only four cities. The exploration of audition location led us to wonder where the contestants, specifically the finalists, are from. We explore this below.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#birthplaces-of-finalists",
    "href": "results.html#birthplaces-of-finalists",
    "title": "3  Results",
    "section": "3.4 Birthplaces of Finalists",
    "text": "3.4 Birthplaces of Finalists\n\n\nCode\nlibrary(ggplot2)\nlibrary(maps)\nlibrary(dplyr)\nlibrary(tidygeocoder)\nworld_map &lt;- map_data(\"world\")\nfinalists &lt;- read.csv(\"finalists.csv\")\nfinalists_geocoded &lt;- finalists |&gt;\n  geocode(address = Birthplace, method = 'osm')\n\nggplot() + \n  geom_map(data = world_map, map = world_map, \n           aes(x = long, y = lat, map_id = region, group = group), \n           fill = \"white\", color = \"gray\",alpha=0.3) + \n  geom_point(data = finalists_geocoded, \n             aes(x = long, y = lat), \n             color = \"#63C5DA\", alpha = 0.6, size = 2) + \n  theme_minimal() + \n   ylim(-50,100)+\n  ggtitle(\"World Distribution of Finalists\")\n\n\n\n\n\n\n\n\n\nThe map highlights the birthplaces of finalists throghout the 18 seasons. We can see a majority of finalists are from the United States, with a few international people. We can zoom in on the US to learn more about where within the United States finalists come from.\n\n\nCode\nusa_map &lt;- filter(world_map,region==\"USA\")\nusa_finalists &lt;- filter(finalists_geocoded, long &lt; -50, lat &gt;0)\nggplot() + \n  geom_map(data = usa_map, map = usa_map, \n           aes(x = long, y = lat, map_id = region, group = group), \n           fill = \"white\", color = \"black\") + \n  geom_point(data = usa_finalists, \n             aes(x = long, y = lat), \n             color = \"#63C5DA\", alpha = 0.6, size = 2) + \n  theme_minimal() + \n  coord_fixed(ratio=1.2)+\n  xlim(-130,-60)+\n  ylim(25,50)+\n  ggtitle(\"USA Distribution of Finalists\")\n\n\nWarning in geom_map(data = usa_map, map = usa_map, aes(x = long, y = lat, :\nIgnoring unknown aesthetics: x and y\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nWe see a lot of finalists are from the east coast, specifically New York. We can also see another cluster in SF and LA. It seems that most of the finalists come from big cities. Interestingly, there are few finalists from the midwest.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#age-and-gender",
    "href": "results.html#age-and-gender",
    "title": "3  Results",
    "section": "3.5 Age and Gender",
    "text": "3.5 Age and Gender\n\n\nCode\nelim &lt;- read.csv(\"elimination_chart.csv\")\nelim_cleaned &lt;- elim |&gt;\n  filter(!is.na(gender) & !is.na(season))\n\nggplot(elim_cleaned, aes(x=gender))+\n  geom_bar(fill=\"#63C5DA\",color=\"black\")+\n  facet_wrap(~ season,scales=\"free_x\",labeller = labeller(season = function(x) paste(\"Season\", x)))+\n  labs(title = \"Gender Distribution by Season\", x = \"Gender\", y=\"Count\")+\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nNext, we can explore gender distribution, starting with the overall count for each season. Generally, most seasons display a fairly even split between male and female participants. However, seasons 2 and 3 stand out as potential outliers, with a significantly higher number of female participants.\nBy plotting the number of participants by gender for each season, we also gain insights into the total number of participants per season. It appears that most seasons have a similar participant count, with the exception of season 13, which seems to have notably more participants.\n\n\nCode\n filtered_gender &lt;- elim_cleaned[elim_cleaned$place == 1, ] \nggplot(filtered_gender, aes(x = gender)) + \n  geom_bar(fill=\"#63C5DA\",color=\"black\") + \n  labs(title = \"Gender Distribution of Winners\", x = \"Gender\", y = \"Count\") + \n  theme_minimal()\n\n\n\n\n\n\n\n\n\nUnlike the gender distribution of all participants throughout the seasons, the gender distribution of winners throughout the seasons is not even, with males winning more than females (10 to 7).\n\n\nCode\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(ggplot2)\n\n# Load datasets\nseasons &lt;- read.csv(\"seasons.csv\")       \nfinalists &lt;- read.csv(\"finalists.csv\")   \n\nfinalists &lt;- finalists |&gt;\n  rename(season = Season)\n\nfinalists &lt;- finalists |&gt;\n  mutate(Birthday = dmy(Birthday),            \n         BirthYear = year(Birthday))           \n\nseason_years &lt;- setdiff(2002:2020, 2017)\nseasons &lt;- seasons |&gt;\n  mutate(year = season_years[season])\n\nfinalists_with_season &lt;- finalists |&gt;\n  left_join(seasons, by = \"season\") |&gt;\n  mutate(is_winner = Contestant == winner)  # Mark winners\n\nfinalists_with_season &lt;- finalists_with_season |&gt;\n  mutate(age = year - BirthYear)\n\nwinners_only &lt;- finalists_with_season |&gt;\n  filter(is_winner)\n\nggplot(winners_only, aes(x = age, fill = is_winner)) +\n  geom_density(fill = \"steelblue\", alpha = 0.2) +\n  labs(\n    title = \"Age Distribution of Winners\",\n    x = \"Age\",\n    y = \"Density\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nTo further explore the winners, we examine the age distribution of winners with a density curve. The curve shows that the average age of winners is around 23 and 24 years old. The plot is right-skewed, with not as many older winners. Lastly, the youngest age of a winner is around 18 years old.\n\n\nCode\nfinalists_with_season &lt;- finalists_with_season |&gt;\n  mutate(group = ifelse(is_winner, \"Winner\", \"Finalist\")) \n\nggplot(finalists_with_season, aes(x = age, color = group, fill = group)) + \n  geom_density(alpha = 0.4, size=1) + \n  labs( title = \"Age Distribution: Finalists vs Winners\", x = \"Age\", y = \"Density\" ) + scale_color_manual(values = c(\"Finalist\" = \"darkblue\", \"Winner\" = \"lavender\")) + scale_fill_manual(values = c(\"Finalist\" = \"darkblue\", \"Winner\" = \"lavender\")) +\n  theme_minimal()\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\nNext, we overlay the density curve of age distribution for finalists across all seasons with that of the winners. The average age for both groups appears similar, around 23 to 24 years old. However, the density curve for finalists is less right-skewed compared to that of the winners, suggesting that there are more older finalists than winners.\nInterestingly, the density curve for finalists shows a slight bimodal pattern, with peaks around ages 18 and 24. This contrasts with the winners’ distribution, which is more concentrated around a single mode.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "d3graph.html",
    "href": "d3graph.html",
    "title": "4  Interactive Plot",
    "section": "",
    "text": "4.1 Observations\nThe interactive heatmap provides a dynamic visualization of the relationship between seasons, average viewership, and the judging panel for each season. The color gradient effectively highlights the variations in viewer engagement across seasons, with darker shades representing seasons that attracted the largest audiences. Notably, seasons 5 and 6 stand out, as they are shaded the darkest, indicating peak viewership levels. As users interact with the heatmap, they can hover over each panel to reveal detailed information. This includes the average number of viewers (in millions) for that specific season, as well as the composition of judges for that season.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Interactive Plot</span>"
    ]
  }
]